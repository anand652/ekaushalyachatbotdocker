name: CI/CD Deployment

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Steps 2-4 (Build and Push images) remain the same...

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build backend Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-backend:latest ./backend_api
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-backend:latest

      - name: Build frontend Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-frontend:latest ./frontend_app
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-frontend:latest

      # Step 5: Deploy to EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/chatbot-deploy

            # 1. Ensure Docker Network and DB connection fix are in place
            docker network create chatbot-network || true
            docker network connect chatbot-network chatbot_db || true

            # 2. CRITICAL FIX: Clean up backend.env
            echo "Applying fixes to backend.env..."
            # Replace incorrect 'db' host with correct container name 'chatbot_db'
            sed -i 's/@db:5432/@chatbot_db:5432/g' ./backend.env
            
            # --- CRITICAL FIX: REMOVE COHERE KEY FROM FILE ---
            # Remove the COHERE_API_KEY line entirely from backend.env to force reliance 
            # on the clean value injected via the Docker -e flag from GitHub Secrets.
            sed -i '/COHERE_API_KEY/d' ./backend.env
            
            # --- DEBUGGING STEP: Show the modified file content ---
            echo "backend.env content after modification:"
            cat ./backend.env
            # --------------------------------------------------------
            
            # 3. Ensure persistent volume exists for data/embeddings
            docker volume create chatbot-backend-data || true
            
            # 4. Pull latest images
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-backend:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-frontend:latest

            # 5. Stop old containers (Excluding DB)
            docker stop backend frontend || true
            docker rm backend frontend || true

            # 6. Run backend container (Volume mount, Database host corrected, API Key now ONLY from secret)
            docker run -d \
              --name backend \
              --network chatbot-network \
              --env-file ./backend.env \
              -e COHERE_API_KEY=${{ secrets.COHERE_API_KEY }} \
              -v chatbot-backend-data:/app/data \
              -p 8000:8000 \
              ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-backend:latest
              
            # 7. Wait longer for the backend to initialize, potentially rebuild embeddings, and connect to DB.
            echo "Waiting 25 seconds for backend initialization and embedding rebuild..."
            sleep 25

            # 8. Run frontend container (Internal network fix)
            docker run -d \
              --name frontend \
              --network chatbot-network \
              --env-file ./frontend.env \
              -e BACKEND_URL=http://backend:8000 \
              -p 80:8501 \
              ${{ secrets.DOCKERHUB_USERNAME }}/chatbot-frontend:latest
